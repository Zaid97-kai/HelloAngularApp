{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Component } from '@angular/core';\nimport { DataService } from './data.service';\nimport { Product } from './product';\nlet AppComponent = class AppComponent {\n  constructor(dataService) {\n    this.dataService = dataService;\n    this.product = new Product(); // изменяемый товар\n    this.tableMode = true; // табличный режим\n  }\n  // загрузка данных при старте компонента \n  ngOnInit() {\n    this.loadProducts();\n  }\n  // получаем данные через сервис\n  loadProducts() {\n    this.dataService.getProducts().subscribe(data => this.products = data);\n  }\n  // сохранение данных\n  save() {\n    if (this.product.id == null) {\n      this.dataService.createProduct(this.product).subscribe(data => this.products.push(data));\n    } else {\n      this.dataService.updateProduct(this.product).subscribe(data => this.loadProducts());\n    }\n    this.cancel();\n  }\n  editProduct(p) {\n    this.product = p;\n  }\n  cancel() {\n    this.product = new Product();\n    this.tableMode = true;\n  }\n  delete(p) {\n    this.dataService.deleteProduct(p.id).subscribe(data => this.loadProducts());\n  }\n  add() {\n    this.cancel();\n    this.tableMode = false;\n  }\n};\nAppComponent = __decorate([Component({\n  selector: 'app',\n  templateUrl: './app.component.html',\n  providers: [DataService]\n})], AppComponent);\nexport { AppComponent };","map":{"version":3,"mappings":";;;;;;;AAAA,SAASA,SAAS,QAAgB,eAAe;AACjD,SAASC,WAAW,QAAQ,gBAAgB;AAC5C,SAASC,OAAO,QAAQ,WAAW;AAO5B,IAAMC,YAAY,GAAlB,MAAMA,YAAY;EAMrBC,YAAoBC,WAAwB;IAAxB,gBAAW,GAAXA,WAAW;IAJ/B,YAAO,GAAY,IAAIH,OAAO,EAAE,CAAC,CAAG;IAEpC,cAAS,GAAY,IAAI,CAAC,CAAU;EAEY;EAEhD;EACAI,QAAQ;IACJ,IAAI,CAACC,YAAY,EAAE;EACvB;EAEA;EACAA,YAAY;IACR,IAAI,CAACF,WAAW,CAACG,WAAW,EAAE,CACzBC,SAAS,CAAEC,IAAe,IAAK,IAAI,CAACC,QAAQ,GAAGD,IAAI,CAAC;EAC7D;EAEA;EACAE,IAAI;IACA,IAAI,IAAI,CAACC,OAAO,CAACC,EAAE,IAAI,IAAI,EAAE;MACzB,IAAI,CAACT,WAAW,CAACU,aAAa,CAAC,IAAI,CAACF,OAAO,CAAC,CACvCJ,SAAS,CAAEC,IAAa,IAAK,IAAI,CAACC,QAAQ,CAACK,IAAI,CAACN,IAAI,CAAC,CAAC;KAC9D,MAAM;MACH,IAAI,CAACL,WAAW,CAACY,aAAa,CAAC,IAAI,CAACJ,OAAO,CAAC,CACvCJ,SAAS,CAACC,IAAI,IAAI,IAAI,CAACH,YAAY,EAAE,CAAC;;IAE/C,IAAI,CAACW,MAAM,EAAE;EACjB;EACAC,WAAW,CAACC,CAAU;IAClB,IAAI,CAACP,OAAO,GAAGO,CAAC;EACpB;EACAF,MAAM;IACF,IAAI,CAACL,OAAO,GAAG,IAAIX,OAAO,EAAE;IAC5B,IAAI,CAACmB,SAAS,GAAG,IAAI;EACzB;EACAC,MAAM,CAACF,CAAU;IACb,IAAI,CAACf,WAAW,CAACkB,aAAa,CAACH,CAAC,CAACN,EAAE,CAAC,CAC/BL,SAAS,CAACC,IAAI,IAAI,IAAI,CAACH,YAAY,EAAE,CAAC;EAC/C;EACAiB,GAAG;IACC,IAAI,CAACN,MAAM,EAAE;IACb,IAAI,CAACG,SAAS,GAAG,KAAK;EAC1B;CACH;AA7CYlB,YAAY,eALxBH,SAAS,CAAC;EACPyB,QAAQ,EAAE,KAAK;EACfC,WAAW,EAAE,sBAAsB;EACnCC,SAAS,EAAE,CAAC1B,WAAW;CAC1B,CAAC,GACWE,YAAY,CA6CxB;SA7CYA,YAAY","names":["Component","DataService","Product","AppComponent","constructor","dataService","ngOnInit","loadProducts","getProducts","subscribe","data","products","save","product","id","createProduct","push","updateProduct","cancel","editProduct","p","tableMode","delete","deleteProduct","add","selector","templateUrl","providers"],"sourceRoot":"","sources":["C:\\Users\\Zaid\\source\\repos\\HelloAngularApp\\HelloAngularApp\\ClientApp\\src\\app\\app.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { DataService } from './data.service';\r\nimport { Product } from './product';\r\n\r\n@Component({\r\n    selector: 'app',\r\n    templateUrl: './app.component.html',\r\n    providers: [DataService]\r\n})\r\nexport class AppComponent implements OnInit {\r\n\r\n    product: Product = new Product();   // изменяемый товар\r\n    products: Product[];                // массив товаров\r\n    tableMode: boolean = true;          // табличный режим\r\n\r\n    constructor(private dataService: DataService) { }\r\n\r\n    // загрузка данных при старте компонента \r\n    ngOnInit() {\r\n        this.loadProducts(); \r\n    }\r\n\r\n    // получаем данные через сервис\r\n    loadProducts() {\r\n        this.dataService.getProducts()\r\n            .subscribe((data: Product[]) => this.products = data);\r\n    }\r\n\r\n    // сохранение данных\r\n    save() {\r\n        if (this.product.id == null) {\r\n            this.dataService.createProduct(this.product)\r\n                .subscribe((data: Product) => this.products.push(data));\r\n        } else {\r\n            this.dataService.updateProduct(this.product)\r\n                .subscribe(data => this.loadProducts());\r\n        }\r\n        this.cancel();\r\n    }\r\n    editProduct(p: Product) {\r\n        this.product = p;\r\n    }\r\n    cancel() {\r\n        this.product = new Product();\r\n        this.tableMode = true;\r\n    }\r\n    delete(p: Product) {\r\n        this.dataService.deleteProduct(p.id)\r\n            .subscribe(data => this.loadProducts());\r\n    }\r\n    add() {\r\n        this.cancel();\r\n        this.tableMode = false;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}